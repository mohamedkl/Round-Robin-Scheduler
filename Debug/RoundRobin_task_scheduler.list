
RoundRobin_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001338  08001338  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001338  08001338  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001338  08001338  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000068  080013a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080013a8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025a3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007b7  00000000  00000000  0002263b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00022df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00022ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c7d  00000000  00000000  000231a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000228f  00000000  00000000  00025e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000096cd  00000000  00000000  000280ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c60  00000000  00000000  000317f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001274 	.word	0x08001274

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	08001274 	.word	0x08001274

080001ec <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <led_init_all+0x58>)
 80001f4:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiobModeReg = (uint32_t*)0x40020400;
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <led_init_all+0x5c>)
 80001f8:	603b      	str	r3, [r7, #0]



	*pRccAhb1enr |= ( 1 << 1);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0202 	orr.w	r2, r3, #2
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiobModeReg |= ( 1 << (2 * LED_GREEN));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 0201 	orr.w	r2, r3, #1
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpiobModeReg |= ( 1 << (2 * LED_RED));
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]
	*pGpiobModeReg |= ( 1 << (2 * LED_BLUE));
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_GREEN));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f826 	bl	800027c <led_off>
    led_off(LED_RED);
 8000230:	200e      	movs	r0, #14
 8000232:	f000 f823 	bl	800027c <led_off>
    led_off(LED_BLUE);
 8000236:	2007      	movs	r0, #7
 8000238:	f000 f820 	bl	800027c <led_off>



}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40023830 	.word	0x40023830
 8000248:	40020400 	.word	0x40020400

0800024c <led_on>:

void led_on(uint8_t led_no)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiobDataReg = (uint32_t*)0x40020414;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <led_on+0x2c>)
 8000258:	60fb      	str	r3, [r7, #12]
  *pGpiobDataReg |= ( 1 << led_no);
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	2101      	movs	r1, #1
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]

}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40020414 	.word	0x40020414

0800027c <led_off>:

void led_off(uint8_t led_no)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiobDataReg = (uint32_t*)0x40020414;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <led_off+0x30>)
 8000288:	60fb      	str	r3, [r7, #12]
	  *pGpiobDataReg &= ~( 1 << led_no);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	79fa      	ldrb	r2, [r7, #7]
 8000290:	2101      	movs	r1, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	401a      	ands	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020414 	.word	0x40020414

080002b0 <main>:
/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];


int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002b4:	f000 f902 	bl	80004bc <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002b8:	4807      	ldr	r0, [pc, #28]	; (80002d8 <main+0x28>)
 80002ba:	f000 f879 	bl	80003b0 <init_scheduler_stack>

	init_tasks_stack();
 80002be:	f000 f87d 	bl	80003bc <init_tasks_stack>

	led_init_all();
 80002c2:	f7ff ff93 	bl	80001ec <led_init_all>

	init_systick_timer(TICK_HZ);
 80002c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ca:	f000 f83b 	bl	8000344 <init_systick_timer>

	switch_sp_to_psp();
 80002ce:	f000 f979 	bl	80005c4 <switch_sp_to_psp>

	task1_handler();
 80002d2:	f000 f806 	bl	80002e2 <task1_handler>

	for(;;);
 80002d6:	e7fe      	b.n	80002d6 <main+0x26>
 80002d8:	2001f000 	.word	0x2001f000

080002dc <idle_task>:
}

void idle_task(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	while(1);
 80002e0:	e7fe      	b.n	80002e0 <idle_task+0x4>

080002e2 <task1_handler>:
}


void task1_handler(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f7ff ffb0 	bl	800024c <led_on>
		task_delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f000 f98a 	bl	8000608 <task_delay>
		led_off(LED_GREEN);
 80002f4:	2000      	movs	r0, #0
 80002f6:	f7ff ffc1 	bl	800027c <led_off>
		task_delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f983 	bl	8000608 <task_delay>
		led_on(LED_GREEN);
 8000302:	e7f0      	b.n	80002e6 <task1_handler+0x4>

08000304 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000308:	200e      	movs	r0, #14
 800030a:	f7ff ff9f 	bl	800024c <led_on>
		task_delay(500);
 800030e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000312:	f000 f979 	bl	8000608 <task_delay>
		led_off(LED_RED);
 8000316:	200e      	movs	r0, #14
 8000318:	f7ff ffb0 	bl	800027c <led_off>
		task_delay(500);
 800031c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000320:	f000 f972 	bl	8000608 <task_delay>
		led_on(LED_RED);
 8000324:	e7f0      	b.n	8000308 <task2_handler+0x4>

08000326 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 800032a:	2007      	movs	r0, #7
 800032c:	f7ff ff8e 	bl	800024c <led_on>
		task_delay(250);
 8000330:	20fa      	movs	r0, #250	; 0xfa
 8000332:	f000 f969 	bl	8000608 <task_delay>
		led_off(LED_BLUE);
 8000336:	2007      	movs	r0, #7
 8000338:	f7ff ffa0 	bl	800027c <led_off>
		task_delay(250);
 800033c:	20fa      	movs	r0, #250	; 0xfa
 800033e:	f000 f963 	bl	8000608 <task_delay>
		led_on(LED_BLUE);
 8000342:	e7f2      	b.n	800032a <task3_handler+0x4>

08000344 <init_systick_timer>:
	}

}

void init_systick_timer(uint32_t tick_hz)
{
 8000344:	b480      	push	{r7}
 8000346:	b087      	sub	sp, #28
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

		uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <init_systick_timer+0x60>)
 800034e:	617b      	str	r3, [r7, #20]
		uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <init_systick_timer+0x64>)
 8000352:	613b      	str	r3, [r7, #16]

	    /* calculation of reload value */
	    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <init_systick_timer+0x68>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	fbb2 f3f3 	udiv	r3, r2, r3
 800035c:	3b01      	subs	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]

	    //Clear the value of SVR
	    *pSRVR &= ~(0x00FFFFFFFF);
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]

	    //load the value in to SVR
	    *pSRVR |= count_value;
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	431a      	orrs	r2, r3
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	601a      	str	r2, [r3, #0]

	    //do some settings
	    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f043 0202 	orr.w	r2, r3, #2
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	601a      	str	r2, [r3, #0]
	    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f043 0204 	orr.w	r2, r3, #4
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	601a      	str	r2, [r3, #0]

	    //enable the systick
	    *pSCSR |= ( 1 << 0); //enables the counter
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0201 	orr.w	r2, r3, #1
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	601a      	str	r2, [r3, #0]

}
 8000396:	bf00      	nop
 8000398:	371c      	adds	r7, #28
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000e014 	.word	0xe000e014
 80003a8:	e000e010 	.word	0xe000e010
 80003ac:	00f42400 	.word	0x00f42400

080003b0 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003b0:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 80003b2:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 80003b6:	4770      	bx	lr

}
 80003b8:	bf00      	nop
	...

080003bc <init_tasks_stack>:

void init_tasks_stack(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0

		user_tasks[0].current_state = TASK_READY_STATE;
 80003c2:	4b35      	ldr	r3, [pc, #212]	; (8000498 <init_tasks_stack+0xdc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	721a      	strb	r2, [r3, #8]
		user_tasks[1].current_state = TASK_READY_STATE;
 80003c8:	4b33      	ldr	r3, [pc, #204]	; (8000498 <init_tasks_stack+0xdc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
		user_tasks[2].current_state = TASK_READY_STATE;
 80003ce:	4b32      	ldr	r3, [pc, #200]	; (8000498 <init_tasks_stack+0xdc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		user_tasks[3].current_state = TASK_READY_STATE;
 80003d6:	4b30      	ldr	r3, [pc, #192]	; (8000498 <init_tasks_stack+0xdc>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		user_tasks[0].psp_value = IDLE_STACK_START;
 80003de:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <init_tasks_stack+0xdc>)
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <init_tasks_stack+0xe0>)
 80003e2:	601a      	str	r2, [r3, #0]
		user_tasks[1].psp_value = T1_STACK_START;
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <init_tasks_stack+0xdc>)
 80003e6:	4a2e      	ldr	r2, [pc, #184]	; (80004a0 <init_tasks_stack+0xe4>)
 80003e8:	611a      	str	r2, [r3, #16]
		user_tasks[2].psp_value = T2_STACK_START;
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <init_tasks_stack+0xdc>)
 80003ec:	4a2d      	ldr	r2, [pc, #180]	; (80004a4 <init_tasks_stack+0xe8>)
 80003ee:	621a      	str	r2, [r3, #32]
		user_tasks[3].psp_value = T3_STACK_START;
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <init_tasks_stack+0xdc>)
 80003f2:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <init_tasks_stack+0xec>)
 80003f4:	631a      	str	r2, [r3, #48]	; 0x30

		user_tasks[0].task_handler = idle_task;
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <init_tasks_stack+0xdc>)
 80003f8:	4a2c      	ldr	r2, [pc, #176]	; (80004ac <init_tasks_stack+0xf0>)
 80003fa:	60da      	str	r2, [r3, #12]
		user_tasks[1].task_handler = task1_handler;
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <init_tasks_stack+0xdc>)
 80003fe:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <init_tasks_stack+0xf4>)
 8000400:	61da      	str	r2, [r3, #28]
		user_tasks[2].task_handler = task2_handler;
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <init_tasks_stack+0xdc>)
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <init_tasks_stack+0xf8>)
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
		user_tasks[3].task_handler = task3_handler;
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <init_tasks_stack+0xdc>)
 800040a:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <init_tasks_stack+0xfc>)
 800040c:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	e037      	b.n	8000484 <init_tasks_stack+0xc8>
	{
				pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000414:	4a20      	ldr	r2, [pc, #128]	; (8000498 <init_tasks_stack+0xdc>)
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	4413      	add	r3, r2
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	60fb      	str	r3, [r7, #12]

				pPSP--;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3b04      	subs	r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
				*pPSP = DUMMY_XPSR;//0x01000000
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800042c:	601a      	str	r2, [r3, #0]

				pPSP--; //PC
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	3b04      	subs	r3, #4
 8000432:	60fb      	str	r3, [r7, #12]
				*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000434:	4a18      	ldr	r2, [pc, #96]	; (8000498 <init_tasks_stack+0xdc>)
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	4413      	add	r3, r2
 800043c:	330c      	adds	r3, #12
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]

				pPSP--; //LR
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	3b04      	subs	r3, #4
 800044a:	60fb      	str	r3, [r7, #12]
				*pPSP = 0xFFFFFFFD;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f06f 0202 	mvn.w	r2, #2
 8000452:	601a      	str	r2, [r3, #0]

				for(int j = 0 ; j < 13 ; j++)
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	e008      	b.n	800046c <init_tasks_stack+0xb0>
				{
					pPSP--;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3b04      	subs	r3, #4
 800045e:	60fb      	str	r3, [r7, #12]
				    *pPSP = 0;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
				for(int j = 0 ; j < 13 ; j++)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3301      	adds	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b0c      	cmp	r3, #12
 8000470:	ddf3      	ble.n	800045a <init_tasks_stack+0x9e>

				}

				user_tasks[i].psp_value = (uint32_t)pPSP;
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	4908      	ldr	r1, [pc, #32]	; (8000498 <init_tasks_stack+0xdc>)
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	440b      	add	r3, r1
 800047c:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	3301      	adds	r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b03      	cmp	r3, #3
 8000488:	ddc4      	ble.n	8000414 <init_tasks_stack+0x58>

	}

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000094 	.word	0x20000094
 800049c:	2001f400 	.word	0x2001f400
 80004a0:	20020000 	.word	0x20020000
 80004a4:	2001fc00 	.word	0x2001fc00
 80004a8:	2001f800 	.word	0x2001f800
 80004ac:	080002dd 	.word	0x080002dd
 80004b0:	080002e3 	.word	0x080002e3
 80004b4:	08000305 	.word	0x08000305
 80004b8:	08000327 	.word	0x08000327

080004bc <enable_processor_faults>:

void enable_processor_faults(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <enable_processor_faults+0x3c>)
 80004c4:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed24 	.word	0xe000ed24

080004fc <get_psp_value>:



uint32_t get_psp_value(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return  user_tasks[current_task].psp_value;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <get_psp_value+0x1c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <get_psp_value+0x20>)
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	4413      	add	r3, r2
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	20000094 	.word	0x20000094

08000520 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <save_psp_value+0x24>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <save_psp_value+0x28>)
 800052e:	011b      	lsls	r3, r3, #4
 8000530:	4413      	add	r3, r2
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000094 	.word	0x20000094

0800054c <update_next_task>:

void update_next_task(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 8000552:	23ff      	movs	r3, #255	; 0xff
 8000554:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	e01e      	b.n	800059a <update_next_task+0x4e>
	{
		current_task++;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <update_next_task+0x70>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <update_next_task+0x70>)
 8000566:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <update_next_task+0x70>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f003 0303 	and.w	r3, r3, #3
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <update_next_task+0x70>)
 8000574:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <update_next_task+0x70>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <update_next_task+0x74>)
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	4413      	add	r3, r2
 8000580:	3308      	adds	r3, #8
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d103      	bne.n	8000594 <update_next_task+0x48>
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <update_next_task+0x70>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d106      	bne.n	80005a2 <update_next_task+0x56>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b03      	cmp	r3, #3
 800059e:	dddd      	ble.n	800055c <update_next_task+0x10>
 80005a0:	e000      	b.n	80005a4 <update_next_task+0x58>
			break;
 80005a2:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <update_next_task+0x64>
		current_task = 0;
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <update_next_task+0x70>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000094 	.word	0x20000094

080005c4 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 80005c4:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80005c6:	f7ff ff99 	bl	80004fc <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 80005ca:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 80005ce:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 80005d2:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80005d6:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005da:	4770      	bx	lr
}
 80005dc:	bf00      	nop
	...

080005e0 <schedule>:

void schedule(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <schedule+0x24>)
 80005e8:	607b      	str	r3, [r7, #4]
	*pICSR |= ( 1 << 28);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed04 	.word	0xe000ed04

08000608 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 8000610:	f04f 0001 	mov.w	r0, #1
 8000614:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <task_delay+0x54>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d015      	beq.n	800064c <task_delay+0x44>
	{
	   user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <task_delay+0x58>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <task_delay+0x54>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	441a      	add	r2, r3
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <task_delay+0x5c>)
 8000630:	0103      	lsls	r3, r0, #4
 8000632:	440b      	add	r3, r1
 8000634:	3304      	adds	r3, #4
 8000636:	601a      	str	r2, [r3, #0]
	   user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <task_delay+0x54>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <task_delay+0x5c>)
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	3308      	adds	r3, #8
 8000644:	22ff      	movs	r2, #255	; 0xff
 8000646:	701a      	strb	r2, [r3, #0]
	   schedule();
 8000648:	f7ff ffca 	bl	80005e0 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	f380 8810 	msr	PRIMASK, r0
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000084 	.word	0x20000084
 8000664:	20000094 	.word	0x20000094

08000668 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <update_global_tick_count+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	4a03      	ldr	r2, [pc, #12]	; (8000680 <update_global_tick_count+0x18>)
 8000674:	6013      	str	r3, [r2, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000084 	.word	0x20000084

08000684 <unblock_tasks>:

void unblock_tasks(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e01b      	b.n	80006c8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <unblock_tasks+0x58>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	4413      	add	r3, r2
 8000698:	3308      	adds	r3, #8
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d010      	beq.n	80006c2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006a0:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <unblock_tasks+0x58>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	3304      	adds	r3, #4
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <unblock_tasks+0x5c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d106      	bne.n	80006c2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <unblock_tasks+0x58>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	4413      	add	r3, r2
 80006bc:	3308      	adds	r3, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	dde0      	ble.n	8000690 <unblock_tasks+0xc>
			}
		}

	}

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000094 	.word	0x20000094
 80006e0:	20000084 	.word	0x20000084

080006e4 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80006e4:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 80006e8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80006ec:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 80006ee:	f7ff ff17 	bl	8000520 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 80006f2:	f7ff ff2b 	bl	800054c <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 80006f6:	f7ff ff01 	bl	80004fc <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80006fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 80006fe:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000702:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000706:	4770      	bx	lr



}
 8000708:	bf00      	nop
	...

0800070c <SysTick_Handler>:


void  SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <SysTick_Handler+0x28>)
 8000714:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 8000716:	f7ff ffa7 	bl	8000668 <update_global_tick_count>

    unblock_tasks();
 800071a:	f7ff ffb3 	bl	8000684 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	e000ed04 	.word	0xe000ed04

08000738 <HardFault_Handler>:



//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800073c:	4801      	ldr	r0, [pc, #4]	; (8000744 <HardFault_Handler+0xc>)
 800073e:	f000 f98d 	bl	8000a5c <puts>
	while(1);
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0xa>
 8000744:	0800128c 	.word	0x0800128c

08000748 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 800074c:	4801      	ldr	r0, [pc, #4]	; (8000754 <MemManage_Handler+0xc>)
 800074e:	f000 f985 	bl	8000a5c <puts>
	while(1);
 8000752:	e7fe      	b.n	8000752 <MemManage_Handler+0xa>
 8000754:	080012a4 	.word	0x080012a4

08000758 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <BusFault_Handler+0xc>)
 800075e:	f000 f97d 	bl	8000a5c <puts>
	while(1);
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0xa>
 8000764:	080012bc 	.word	0x080012bc

08000768 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <ITM_SendChar+0x48>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <ITM_SendChar+0x48>)
 8000778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800077c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <ITM_SendChar+0x4c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <ITM_SendChar+0x4c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800078a:	bf00      	nop
 800078c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f8      	beq.n	800078c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800079a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	6013      	str	r3, [r2, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000edfc 	.word	0xe000edfc
 80007b4:	e0000e00 	.word	0xe0000e00

080007b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffab 	bl	8000768 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000852:	605a      	str	r2, [r3, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_isatty>:

int _isatty(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x50>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x16>
		heap_end = &end;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <_sbrk+0x50>)
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <_sbrk+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <_sbrk+0x50>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <_sbrk+0x50>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	466a      	mov	r2, sp
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d907      	bls.n	80008ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008be:	f000 f83f 	bl	8000940 <__errno>
 80008c2:	4602      	mov	r2, r0
 80008c4:	230c      	movs	r3, #12
 80008c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	e006      	b.n	80008dc <_sbrk+0x48>
	}

	heap_end += incr;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <_sbrk+0x50>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <_sbrk+0x50>)
 80008d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000088 	.word	0x20000088
 80008e8:	200000d8 	.word	0x200000d8

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000916:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800091a:	f000 f817 	bl	800094c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fcc7 	bl	80002b0 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000930:	08001340 	.word	0x08001340
  ldr r2, =_sbss
 8000934:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000938:	200000d8 	.word	0x200000d8

0800093c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <__errno>:
 8000940:	4b01      	ldr	r3, [pc, #4]	; (8000948 <__errno+0x8>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000004 	.word	0x20000004

0800094c <__libc_init_array>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4e0d      	ldr	r6, [pc, #52]	; (8000984 <__libc_init_array+0x38>)
 8000950:	4c0d      	ldr	r4, [pc, #52]	; (8000988 <__libc_init_array+0x3c>)
 8000952:	1ba4      	subs	r4, r4, r6
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	2500      	movs	r5, #0
 8000958:	42a5      	cmp	r5, r4
 800095a:	d109      	bne.n	8000970 <__libc_init_array+0x24>
 800095c:	4e0b      	ldr	r6, [pc, #44]	; (800098c <__libc_init_array+0x40>)
 800095e:	4c0c      	ldr	r4, [pc, #48]	; (8000990 <__libc_init_array+0x44>)
 8000960:	f000 fc88 	bl	8001274 <_init>
 8000964:	1ba4      	subs	r4, r4, r6
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	2500      	movs	r5, #0
 800096a:	42a5      	cmp	r5, r4
 800096c:	d105      	bne.n	800097a <__libc_init_array+0x2e>
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000974:	4798      	blx	r3
 8000976:	3501      	adds	r5, #1
 8000978:	e7ee      	b.n	8000958 <__libc_init_array+0xc>
 800097a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800097e:	4798      	blx	r3
 8000980:	3501      	adds	r5, #1
 8000982:	e7f2      	b.n	800096a <__libc_init_array+0x1e>
 8000984:	08001338 	.word	0x08001338
 8000988:	08001338 	.word	0x08001338
 800098c:	08001338 	.word	0x08001338
 8000990:	0800133c 	.word	0x0800133c

08000994 <memset>:
 8000994:	4402      	add	r2, r0
 8000996:	4603      	mov	r3, r0
 8000998:	4293      	cmp	r3, r2
 800099a:	d100      	bne.n	800099e <memset+0xa>
 800099c:	4770      	bx	lr
 800099e:	f803 1b01 	strb.w	r1, [r3], #1
 80009a2:	e7f9      	b.n	8000998 <memset+0x4>

080009a4 <_puts_r>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	460e      	mov	r6, r1
 80009a8:	4605      	mov	r5, r0
 80009aa:	b118      	cbz	r0, 80009b4 <_puts_r+0x10>
 80009ac:	6983      	ldr	r3, [r0, #24]
 80009ae:	b90b      	cbnz	r3, 80009b4 <_puts_r+0x10>
 80009b0:	f000 fa0c 	bl	8000dcc <__sinit>
 80009b4:	69ab      	ldr	r3, [r5, #24]
 80009b6:	68ac      	ldr	r4, [r5, #8]
 80009b8:	b913      	cbnz	r3, 80009c0 <_puts_r+0x1c>
 80009ba:	4628      	mov	r0, r5
 80009bc:	f000 fa06 	bl	8000dcc <__sinit>
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <_puts_r+0xac>)
 80009c2:	429c      	cmp	r4, r3
 80009c4:	d117      	bne.n	80009f6 <_puts_r+0x52>
 80009c6:	686c      	ldr	r4, [r5, #4]
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	071b      	lsls	r3, r3, #28
 80009cc:	d51d      	bpl.n	8000a0a <_puts_r+0x66>
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	b1db      	cbz	r3, 8000a0a <_puts_r+0x66>
 80009d2:	3e01      	subs	r6, #1
 80009d4:	68a3      	ldr	r3, [r4, #8]
 80009d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009da:	3b01      	subs	r3, #1
 80009dc:	60a3      	str	r3, [r4, #8]
 80009de:	b9e9      	cbnz	r1, 8000a1c <_puts_r+0x78>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da2e      	bge.n	8000a42 <_puts_r+0x9e>
 80009e4:	4622      	mov	r2, r4
 80009e6:	210a      	movs	r1, #10
 80009e8:	4628      	mov	r0, r5
 80009ea:	f000 f83f 	bl	8000a6c <__swbuf_r>
 80009ee:	3001      	adds	r0, #1
 80009f0:	d011      	beq.n	8000a16 <_puts_r+0x72>
 80009f2:	200a      	movs	r0, #10
 80009f4:	e011      	b.n	8000a1a <_puts_r+0x76>
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <_puts_r+0xb0>)
 80009f8:	429c      	cmp	r4, r3
 80009fa:	d101      	bne.n	8000a00 <_puts_r+0x5c>
 80009fc:	68ac      	ldr	r4, [r5, #8]
 80009fe:	e7e3      	b.n	80009c8 <_puts_r+0x24>
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_puts_r+0xb4>)
 8000a02:	429c      	cmp	r4, r3
 8000a04:	bf08      	it	eq
 8000a06:	68ec      	ldreq	r4, [r5, #12]
 8000a08:	e7de      	b.n	80009c8 <_puts_r+0x24>
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f000 f87f 	bl	8000b10 <__swsetup_r>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d0dd      	beq.n	80009d2 <_puts_r+0x2e>
 8000a16:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da04      	bge.n	8000a2a <_puts_r+0x86>
 8000a20:	69a2      	ldr	r2, [r4, #24]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dc06      	bgt.n	8000a34 <_puts_r+0x90>
 8000a26:	290a      	cmp	r1, #10
 8000a28:	d004      	beq.n	8000a34 <_puts_r+0x90>
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	6022      	str	r2, [r4, #0]
 8000a30:	7019      	strb	r1, [r3, #0]
 8000a32:	e7cf      	b.n	80009d4 <_puts_r+0x30>
 8000a34:	4622      	mov	r2, r4
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 f818 	bl	8000a6c <__swbuf_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d1c9      	bne.n	80009d4 <_puts_r+0x30>
 8000a40:	e7e9      	b.n	8000a16 <_puts_r+0x72>
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	200a      	movs	r0, #10
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	6022      	str	r2, [r4, #0]
 8000a4a:	7018      	strb	r0, [r3, #0]
 8000a4c:	e7e5      	b.n	8000a1a <_puts_r+0x76>
 8000a4e:	bf00      	nop
 8000a50:	080012f8 	.word	0x080012f8
 8000a54:	08001318 	.word	0x08001318
 8000a58:	080012d8 	.word	0x080012d8

08000a5c <puts>:
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <puts+0xc>)
 8000a5e:	4601      	mov	r1, r0
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	f7ff bf9f 	b.w	80009a4 <_puts_r>
 8000a66:	bf00      	nop
 8000a68:	20000004 	.word	0x20000004

08000a6c <__swbuf_r>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	460e      	mov	r6, r1
 8000a70:	4614      	mov	r4, r2
 8000a72:	4605      	mov	r5, r0
 8000a74:	b118      	cbz	r0, 8000a7e <__swbuf_r+0x12>
 8000a76:	6983      	ldr	r3, [r0, #24]
 8000a78:	b90b      	cbnz	r3, 8000a7e <__swbuf_r+0x12>
 8000a7a:	f000 f9a7 	bl	8000dcc <__sinit>
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <__swbuf_r+0x98>)
 8000a80:	429c      	cmp	r4, r3
 8000a82:	d12a      	bne.n	8000ada <__swbuf_r+0x6e>
 8000a84:	686c      	ldr	r4, [r5, #4]
 8000a86:	69a3      	ldr	r3, [r4, #24]
 8000a88:	60a3      	str	r3, [r4, #8]
 8000a8a:	89a3      	ldrh	r3, [r4, #12]
 8000a8c:	071a      	lsls	r2, r3, #28
 8000a8e:	d52e      	bpl.n	8000aee <__swbuf_r+0x82>
 8000a90:	6923      	ldr	r3, [r4, #16]
 8000a92:	b363      	cbz	r3, 8000aee <__swbuf_r+0x82>
 8000a94:	6923      	ldr	r3, [r4, #16]
 8000a96:	6820      	ldr	r0, [r4, #0]
 8000a98:	1ac0      	subs	r0, r0, r3
 8000a9a:	6963      	ldr	r3, [r4, #20]
 8000a9c:	b2f6      	uxtb	r6, r6
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	dc04      	bgt.n	8000aae <__swbuf_r+0x42>
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f000 f926 	bl	8000cf8 <_fflush_r>
 8000aac:	bb28      	cbnz	r0, 8000afa <__swbuf_r+0x8e>
 8000aae:	68a3      	ldr	r3, [r4, #8]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	60a3      	str	r3, [r4, #8]
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	6022      	str	r2, [r4, #0]
 8000aba:	701e      	strb	r6, [r3, #0]
 8000abc:	6963      	ldr	r3, [r4, #20]
 8000abe:	3001      	adds	r0, #1
 8000ac0:	4283      	cmp	r3, r0
 8000ac2:	d004      	beq.n	8000ace <__swbuf_r+0x62>
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	07db      	lsls	r3, r3, #31
 8000ac8:	d519      	bpl.n	8000afe <__swbuf_r+0x92>
 8000aca:	2e0a      	cmp	r6, #10
 8000acc:	d117      	bne.n	8000afe <__swbuf_r+0x92>
 8000ace:	4621      	mov	r1, r4
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f000 f911 	bl	8000cf8 <_fflush_r>
 8000ad6:	b190      	cbz	r0, 8000afe <__swbuf_r+0x92>
 8000ad8:	e00f      	b.n	8000afa <__swbuf_r+0x8e>
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <__swbuf_r+0x9c>)
 8000adc:	429c      	cmp	r4, r3
 8000ade:	d101      	bne.n	8000ae4 <__swbuf_r+0x78>
 8000ae0:	68ac      	ldr	r4, [r5, #8]
 8000ae2:	e7d0      	b.n	8000a86 <__swbuf_r+0x1a>
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <__swbuf_r+0xa0>)
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	bf08      	it	eq
 8000aea:	68ec      	ldreq	r4, [r5, #12]
 8000aec:	e7cb      	b.n	8000a86 <__swbuf_r+0x1a>
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f80d 	bl	8000b10 <__swsetup_r>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d0cc      	beq.n	8000a94 <__swbuf_r+0x28>
 8000afa:	f04f 37ff 	mov.w	r7, #4294967295
 8000afe:	4638      	mov	r0, r7
 8000b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	080012f8 	.word	0x080012f8
 8000b08:	08001318 	.word	0x08001318
 8000b0c:	080012d8 	.word	0x080012d8

08000b10 <__swsetup_r>:
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <__swsetup_r+0xcc>)
 8000b12:	b570      	push	{r4, r5, r6, lr}
 8000b14:	681d      	ldr	r5, [r3, #0]
 8000b16:	4606      	mov	r6, r0
 8000b18:	460c      	mov	r4, r1
 8000b1a:	b125      	cbz	r5, 8000b26 <__swsetup_r+0x16>
 8000b1c:	69ab      	ldr	r3, [r5, #24]
 8000b1e:	b913      	cbnz	r3, 8000b26 <__swsetup_r+0x16>
 8000b20:	4628      	mov	r0, r5
 8000b22:	f000 f953 	bl	8000dcc <__sinit>
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <__swsetup_r+0xd0>)
 8000b28:	429c      	cmp	r4, r3
 8000b2a:	d10f      	bne.n	8000b4c <__swsetup_r+0x3c>
 8000b2c:	686c      	ldr	r4, [r5, #4]
 8000b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	0715      	lsls	r5, r2, #28
 8000b36:	d42c      	bmi.n	8000b92 <__swsetup_r+0x82>
 8000b38:	06d0      	lsls	r0, r2, #27
 8000b3a:	d411      	bmi.n	8000b60 <__swsetup_r+0x50>
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	6032      	str	r2, [r6, #0]
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	81a3      	strh	r3, [r4, #12]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	e03e      	b.n	8000bca <__swsetup_r+0xba>
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <__swsetup_r+0xd4>)
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d101      	bne.n	8000b56 <__swsetup_r+0x46>
 8000b52:	68ac      	ldr	r4, [r5, #8]
 8000b54:	e7eb      	b.n	8000b2e <__swsetup_r+0x1e>
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <__swsetup_r+0xd8>)
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	bf08      	it	eq
 8000b5c:	68ec      	ldreq	r4, [r5, #12]
 8000b5e:	e7e6      	b.n	8000b2e <__swsetup_r+0x1e>
 8000b60:	0751      	lsls	r1, r2, #29
 8000b62:	d512      	bpl.n	8000b8a <__swsetup_r+0x7a>
 8000b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b66:	b141      	cbz	r1, 8000b7a <__swsetup_r+0x6a>
 8000b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d002      	beq.n	8000b76 <__swsetup_r+0x66>
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 fa19 	bl	8000fa8 <_free_r>
 8000b76:	2300      	movs	r3, #0
 8000b78:	6363      	str	r3, [r4, #52]	; 0x34
 8000b7a:	89a3      	ldrh	r3, [r4, #12]
 8000b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b80:	81a3      	strh	r3, [r4, #12]
 8000b82:	2300      	movs	r3, #0
 8000b84:	6063      	str	r3, [r4, #4]
 8000b86:	6923      	ldr	r3, [r4, #16]
 8000b88:	6023      	str	r3, [r4, #0]
 8000b8a:	89a3      	ldrh	r3, [r4, #12]
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	81a3      	strh	r3, [r4, #12]
 8000b92:	6923      	ldr	r3, [r4, #16]
 8000b94:	b94b      	cbnz	r3, 8000baa <__swsetup_r+0x9a>
 8000b96:	89a3      	ldrh	r3, [r4, #12]
 8000b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba0:	d003      	beq.n	8000baa <__swsetup_r+0x9a>
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 f9bf 	bl	8000f28 <__smakebuf_r>
 8000baa:	89a2      	ldrh	r2, [r4, #12]
 8000bac:	f012 0301 	ands.w	r3, r2, #1
 8000bb0:	d00c      	beq.n	8000bcc <__swsetup_r+0xbc>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60a3      	str	r3, [r4, #8]
 8000bb6:	6963      	ldr	r3, [r4, #20]
 8000bb8:	425b      	negs	r3, r3
 8000bba:	61a3      	str	r3, [r4, #24]
 8000bbc:	6923      	ldr	r3, [r4, #16]
 8000bbe:	b953      	cbnz	r3, 8000bd6 <__swsetup_r+0xc6>
 8000bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000bc8:	d1ba      	bne.n	8000b40 <__swsetup_r+0x30>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	0792      	lsls	r2, r2, #30
 8000bce:	bf58      	it	pl
 8000bd0:	6963      	ldrpl	r3, [r4, #20]
 8000bd2:	60a3      	str	r3, [r4, #8]
 8000bd4:	e7f2      	b.n	8000bbc <__swsetup_r+0xac>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e7f7      	b.n	8000bca <__swsetup_r+0xba>
 8000bda:	bf00      	nop
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	080012f8 	.word	0x080012f8
 8000be4:	08001318 	.word	0x08001318
 8000be8:	080012d8 	.word	0x080012d8

08000bec <__sflush_r>:
 8000bec:	898a      	ldrh	r2, [r1, #12]
 8000bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	0710      	lsls	r0, r2, #28
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	d458      	bmi.n	8000cac <__sflush_r+0xc0>
 8000bfa:	684b      	ldr	r3, [r1, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dc05      	bgt.n	8000c0c <__sflush_r+0x20>
 8000c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dc02      	bgt.n	8000c0c <__sflush_r+0x20>
 8000c06:	2000      	movs	r0, #0
 8000c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d0f9      	beq.n	8000c06 <__sflush_r+0x1a>
 8000c12:	2300      	movs	r3, #0
 8000c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c18:	682f      	ldr	r7, [r5, #0]
 8000c1a:	6a21      	ldr	r1, [r4, #32]
 8000c1c:	602b      	str	r3, [r5, #0]
 8000c1e:	d032      	beq.n	8000c86 <__sflush_r+0x9a>
 8000c20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	075a      	lsls	r2, r3, #29
 8000c26:	d505      	bpl.n	8000c34 <__sflush_r+0x48>
 8000c28:	6863      	ldr	r3, [r4, #4]
 8000c2a:	1ac0      	subs	r0, r0, r3
 8000c2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c2e:	b10b      	cbz	r3, 8000c34 <__sflush_r+0x48>
 8000c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c32:	1ac0      	subs	r0, r0, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	4602      	mov	r2, r0
 8000c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c3a:	6a21      	ldr	r1, [r4, #32]
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	47b0      	blx	r6
 8000c40:	1c43      	adds	r3, r0, #1
 8000c42:	89a3      	ldrh	r3, [r4, #12]
 8000c44:	d106      	bne.n	8000c54 <__sflush_r+0x68>
 8000c46:	6829      	ldr	r1, [r5, #0]
 8000c48:	291d      	cmp	r1, #29
 8000c4a:	d848      	bhi.n	8000cde <__sflush_r+0xf2>
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <__sflush_r+0x108>)
 8000c4e:	40ca      	lsrs	r2, r1
 8000c50:	07d6      	lsls	r6, r2, #31
 8000c52:	d544      	bpl.n	8000cde <__sflush_r+0xf2>
 8000c54:	2200      	movs	r2, #0
 8000c56:	6062      	str	r2, [r4, #4]
 8000c58:	04d9      	lsls	r1, r3, #19
 8000c5a:	6922      	ldr	r2, [r4, #16]
 8000c5c:	6022      	str	r2, [r4, #0]
 8000c5e:	d504      	bpl.n	8000c6a <__sflush_r+0x7e>
 8000c60:	1c42      	adds	r2, r0, #1
 8000c62:	d101      	bne.n	8000c68 <__sflush_r+0x7c>
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	b903      	cbnz	r3, 8000c6a <__sflush_r+0x7e>
 8000c68:	6560      	str	r0, [r4, #84]	; 0x54
 8000c6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c6c:	602f      	str	r7, [r5, #0]
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d0c9      	beq.n	8000c06 <__sflush_r+0x1a>
 8000c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d002      	beq.n	8000c80 <__sflush_r+0x94>
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	f000 f994 	bl	8000fa8 <_free_r>
 8000c80:	2000      	movs	r0, #0
 8000c82:	6360      	str	r0, [r4, #52]	; 0x34
 8000c84:	e7c0      	b.n	8000c08 <__sflush_r+0x1c>
 8000c86:	2301      	movs	r3, #1
 8000c88:	4628      	mov	r0, r5
 8000c8a:	47b0      	blx	r6
 8000c8c:	1c41      	adds	r1, r0, #1
 8000c8e:	d1c8      	bne.n	8000c22 <__sflush_r+0x36>
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0c5      	beq.n	8000c22 <__sflush_r+0x36>
 8000c96:	2b1d      	cmp	r3, #29
 8000c98:	d001      	beq.n	8000c9e <__sflush_r+0xb2>
 8000c9a:	2b16      	cmp	r3, #22
 8000c9c:	d101      	bne.n	8000ca2 <__sflush_r+0xb6>
 8000c9e:	602f      	str	r7, [r5, #0]
 8000ca0:	e7b1      	b.n	8000c06 <__sflush_r+0x1a>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	81a3      	strh	r3, [r4, #12]
 8000caa:	e7ad      	b.n	8000c08 <__sflush_r+0x1c>
 8000cac:	690f      	ldr	r7, [r1, #16]
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d0a9      	beq.n	8000c06 <__sflush_r+0x1a>
 8000cb2:	0793      	lsls	r3, r2, #30
 8000cb4:	680e      	ldr	r6, [r1, #0]
 8000cb6:	bf08      	it	eq
 8000cb8:	694b      	ldreq	r3, [r1, #20]
 8000cba:	600f      	str	r7, [r1, #0]
 8000cbc:	bf18      	it	ne
 8000cbe:	2300      	movne	r3, #0
 8000cc0:	eba6 0807 	sub.w	r8, r6, r7
 8000cc4:	608b      	str	r3, [r1, #8]
 8000cc6:	f1b8 0f00 	cmp.w	r8, #0
 8000cca:	dd9c      	ble.n	8000c06 <__sflush_r+0x1a>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	463a      	mov	r2, r7
 8000cd0:	6a21      	ldr	r1, [r4, #32]
 8000cd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	47b0      	blx	r6
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	dc06      	bgt.n	8000cea <__sflush_r+0xfe>
 8000cdc:	89a3      	ldrh	r3, [r4, #12]
 8000cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce2:	81a3      	strh	r3, [r4, #12]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	e78e      	b.n	8000c08 <__sflush_r+0x1c>
 8000cea:	4407      	add	r7, r0
 8000cec:	eba8 0800 	sub.w	r8, r8, r0
 8000cf0:	e7e9      	b.n	8000cc6 <__sflush_r+0xda>
 8000cf2:	bf00      	nop
 8000cf4:	20400001 	.word	0x20400001

08000cf8 <_fflush_r>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	690b      	ldr	r3, [r1, #16]
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	460c      	mov	r4, r1
 8000d00:	b1db      	cbz	r3, 8000d3a <_fflush_r+0x42>
 8000d02:	b118      	cbz	r0, 8000d0c <_fflush_r+0x14>
 8000d04:	6983      	ldr	r3, [r0, #24]
 8000d06:	b90b      	cbnz	r3, 8000d0c <_fflush_r+0x14>
 8000d08:	f000 f860 	bl	8000dcc <__sinit>
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <_fflush_r+0x48>)
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	d109      	bne.n	8000d26 <_fflush_r+0x2e>
 8000d12:	686c      	ldr	r4, [r5, #4]
 8000d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d18:	b17b      	cbz	r3, 8000d3a <_fflush_r+0x42>
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d22:	f7ff bf63 	b.w	8000bec <__sflush_r>
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_fflush_r+0x4c>)
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d101      	bne.n	8000d30 <_fflush_r+0x38>
 8000d2c:	68ac      	ldr	r4, [r5, #8]
 8000d2e:	e7f1      	b.n	8000d14 <_fflush_r+0x1c>
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <_fflush_r+0x50>)
 8000d32:	429c      	cmp	r4, r3
 8000d34:	bf08      	it	eq
 8000d36:	68ec      	ldreq	r4, [r5, #12]
 8000d38:	e7ec      	b.n	8000d14 <_fflush_r+0x1c>
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop
 8000d40:	080012f8 	.word	0x080012f8
 8000d44:	08001318 	.word	0x08001318
 8000d48:	080012d8 	.word	0x080012d8

08000d4c <std>:
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	4604      	mov	r4, r0
 8000d52:	e9c0 3300 	strd	r3, r3, [r0]
 8000d56:	6083      	str	r3, [r0, #8]
 8000d58:	8181      	strh	r1, [r0, #12]
 8000d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d5c:	81c2      	strh	r2, [r0, #14]
 8000d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d62:	6183      	str	r3, [r0, #24]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2208      	movs	r2, #8
 8000d68:	305c      	adds	r0, #92	; 0x5c
 8000d6a:	f7ff fe13 	bl	8000994 <memset>
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <std+0x38>)
 8000d70:	6263      	str	r3, [r4, #36]	; 0x24
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <std+0x3c>)
 8000d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <std+0x40>)
 8000d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <std+0x44>)
 8000d7c:	6224      	str	r4, [r4, #32]
 8000d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	bf00      	nop
 8000d84:	08001119 	.word	0x08001119
 8000d88:	0800113b 	.word	0x0800113b
 8000d8c:	08001173 	.word	0x08001173
 8000d90:	08001197 	.word	0x08001197

08000d94 <_cleanup_r>:
 8000d94:	4901      	ldr	r1, [pc, #4]	; (8000d9c <_cleanup_r+0x8>)
 8000d96:	f000 b885 	b.w	8000ea4 <_fwalk_reent>
 8000d9a:	bf00      	nop
 8000d9c:	08000cf9 	.word	0x08000cf9

08000da0 <__sfmoreglue>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	1e4a      	subs	r2, r1, #1
 8000da4:	2568      	movs	r5, #104	; 0x68
 8000da6:	4355      	muls	r5, r2
 8000da8:	460e      	mov	r6, r1
 8000daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dae:	f000 f949 	bl	8001044 <_malloc_r>
 8000db2:	4604      	mov	r4, r0
 8000db4:	b140      	cbz	r0, 8000dc8 <__sfmoreglue+0x28>
 8000db6:	2100      	movs	r1, #0
 8000db8:	e9c0 1600 	strd	r1, r6, [r0]
 8000dbc:	300c      	adds	r0, #12
 8000dbe:	60a0      	str	r0, [r4, #8]
 8000dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dc4:	f7ff fde6 	bl	8000994 <memset>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	bd70      	pop	{r4, r5, r6, pc}

08000dcc <__sinit>:
 8000dcc:	6983      	ldr	r3, [r0, #24]
 8000dce:	b510      	push	{r4, lr}
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	bb33      	cbnz	r3, 8000e22 <__sinit+0x56>
 8000dd4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000dd8:	6503      	str	r3, [r0, #80]	; 0x50
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <__sinit+0x58>)
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <__sinit+0x5c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6282      	str	r2, [r0, #40]	; 0x28
 8000de2:	4298      	cmp	r0, r3
 8000de4:	bf04      	itt	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	6183      	streq	r3, [r0, #24]
 8000dea:	f000 f81f 	bl	8000e2c <__sfp>
 8000dee:	6060      	str	r0, [r4, #4]
 8000df0:	4620      	mov	r0, r4
 8000df2:	f000 f81b 	bl	8000e2c <__sfp>
 8000df6:	60a0      	str	r0, [r4, #8]
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f000 f817 	bl	8000e2c <__sfp>
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60e0      	str	r0, [r4, #12]
 8000e02:	2104      	movs	r1, #4
 8000e04:	6860      	ldr	r0, [r4, #4]
 8000e06:	f7ff ffa1 	bl	8000d4c <std>
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2109      	movs	r1, #9
 8000e0e:	68a0      	ldr	r0, [r4, #8]
 8000e10:	f7ff ff9c 	bl	8000d4c <std>
 8000e14:	2202      	movs	r2, #2
 8000e16:	2112      	movs	r1, #18
 8000e18:	68e0      	ldr	r0, [r4, #12]
 8000e1a:	f7ff ff97 	bl	8000d4c <std>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61a3      	str	r3, [r4, #24]
 8000e22:	bd10      	pop	{r4, pc}
 8000e24:	080012d4 	.word	0x080012d4
 8000e28:	08000d95 	.word	0x08000d95

08000e2c <__sfp>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <__sfp+0x70>)
 8000e30:	681e      	ldr	r6, [r3, #0]
 8000e32:	69b3      	ldr	r3, [r6, #24]
 8000e34:	4607      	mov	r7, r0
 8000e36:	b913      	cbnz	r3, 8000e3e <__sfp+0x12>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff ffc7 	bl	8000dcc <__sinit>
 8000e3e:	3648      	adds	r6, #72	; 0x48
 8000e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	d503      	bpl.n	8000e50 <__sfp+0x24>
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	b133      	cbz	r3, 8000e5a <__sfp+0x2e>
 8000e4c:	6836      	ldr	r6, [r6, #0]
 8000e4e:	e7f7      	b.n	8000e40 <__sfp+0x14>
 8000e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e54:	b16d      	cbz	r5, 8000e72 <__sfp+0x46>
 8000e56:	3468      	adds	r4, #104	; 0x68
 8000e58:	e7f4      	b.n	8000e44 <__sfp+0x18>
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f7ff ff9f 	bl	8000da0 <__sfmoreglue>
 8000e62:	6030      	str	r0, [r6, #0]
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d1f1      	bne.n	8000e4c <__sfp+0x20>
 8000e68:	230c      	movs	r3, #12
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	4620      	mov	r0, r4
 8000e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <__sfp+0x74>)
 8000e74:	6665      	str	r5, [r4, #100]	; 0x64
 8000e76:	e9c4 5500 	strd	r5, r5, [r4]
 8000e7a:	60a5      	str	r5, [r4, #8]
 8000e7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000e80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000e84:	2208      	movs	r2, #8
 8000e86:	4629      	mov	r1, r5
 8000e88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e8c:	f7ff fd82 	bl	8000994 <memset>
 8000e90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e98:	e7e9      	b.n	8000e6e <__sfp+0x42>
 8000e9a:	bf00      	nop
 8000e9c:	080012d4 	.word	0x080012d4
 8000ea0:	ffff0001 	.word	0xffff0001

08000ea4 <_fwalk_reent>:
 8000ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea8:	4680      	mov	r8, r0
 8000eaa:	4689      	mov	r9, r1
 8000eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000eb0:	2600      	movs	r6, #0
 8000eb2:	b914      	cbnz	r4, 8000eba <_fwalk_reent+0x16>
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000ebe:	3f01      	subs	r7, #1
 8000ec0:	d501      	bpl.n	8000ec6 <_fwalk_reent+0x22>
 8000ec2:	6824      	ldr	r4, [r4, #0]
 8000ec4:	e7f5      	b.n	8000eb2 <_fwalk_reent+0xe>
 8000ec6:	89ab      	ldrh	r3, [r5, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d907      	bls.n	8000edc <_fwalk_reent+0x38>
 8000ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	d003      	beq.n	8000edc <_fwalk_reent+0x38>
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	47c8      	blx	r9
 8000eda:	4306      	orrs	r6, r0
 8000edc:	3568      	adds	r5, #104	; 0x68
 8000ede:	e7ee      	b.n	8000ebe <_fwalk_reent+0x1a>

08000ee0 <__swhatbuf_r>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	460e      	mov	r6, r1
 8000ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	b096      	sub	sp, #88	; 0x58
 8000eec:	4614      	mov	r4, r2
 8000eee:	461d      	mov	r5, r3
 8000ef0:	da07      	bge.n	8000f02 <__swhatbuf_r+0x22>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	602b      	str	r3, [r5, #0]
 8000ef6:	89b3      	ldrh	r3, [r6, #12]
 8000ef8:	061a      	lsls	r2, r3, #24
 8000efa:	d410      	bmi.n	8000f1e <__swhatbuf_r+0x3e>
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	e00e      	b.n	8000f20 <__swhatbuf_r+0x40>
 8000f02:	466a      	mov	r2, sp
 8000f04:	f000 f96e 	bl	80011e4 <_fstat_r>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	dbf2      	blt.n	8000ef2 <__swhatbuf_r+0x12>
 8000f0c:	9a01      	ldr	r2, [sp, #4]
 8000f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f16:	425a      	negs	r2, r3
 8000f18:	415a      	adcs	r2, r3
 8000f1a:	602a      	str	r2, [r5, #0]
 8000f1c:	e7ee      	b.n	8000efc <__swhatbuf_r+0x1c>
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	2000      	movs	r0, #0
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	b016      	add	sp, #88	; 0x58
 8000f26:	bd70      	pop	{r4, r5, r6, pc}

08000f28 <__smakebuf_r>:
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f2c:	079d      	lsls	r5, r3, #30
 8000f2e:	4606      	mov	r6, r0
 8000f30:	460c      	mov	r4, r1
 8000f32:	d507      	bpl.n	8000f44 <__smakebuf_r+0x1c>
 8000f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	6123      	str	r3, [r4, #16]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	6163      	str	r3, [r4, #20]
 8000f40:	b002      	add	sp, #8
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
 8000f44:	ab01      	add	r3, sp, #4
 8000f46:	466a      	mov	r2, sp
 8000f48:	f7ff ffca 	bl	8000ee0 <__swhatbuf_r>
 8000f4c:	9900      	ldr	r1, [sp, #0]
 8000f4e:	4605      	mov	r5, r0
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 f877 	bl	8001044 <_malloc_r>
 8000f56:	b948      	cbnz	r0, 8000f6c <__smakebuf_r+0x44>
 8000f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f5c:	059a      	lsls	r2, r3, #22
 8000f5e:	d4ef      	bmi.n	8000f40 <__smakebuf_r+0x18>
 8000f60:	f023 0303 	bic.w	r3, r3, #3
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	e7e3      	b.n	8000f34 <__smakebuf_r+0xc>
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <__smakebuf_r+0x7c>)
 8000f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	6020      	str	r0, [r4, #0]
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	9b00      	ldr	r3, [sp, #0]
 8000f7c:	6163      	str	r3, [r4, #20]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	6120      	str	r0, [r4, #16]
 8000f82:	b15b      	cbz	r3, 8000f9c <__smakebuf_r+0x74>
 8000f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f000 f93d 	bl	8001208 <_isatty_r>
 8000f8e:	b128      	cbz	r0, 8000f9c <__smakebuf_r+0x74>
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	89a3      	ldrh	r3, [r4, #12]
 8000f9e:	431d      	orrs	r5, r3
 8000fa0:	81a5      	strh	r5, [r4, #12]
 8000fa2:	e7cd      	b.n	8000f40 <__smakebuf_r+0x18>
 8000fa4:	08000d95 	.word	0x08000d95

08000fa8 <_free_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4605      	mov	r5, r0
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d045      	beq.n	800103c <_free_r+0x94>
 8000fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fb4:	1f0c      	subs	r4, r1, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb8      	it	lt
 8000fba:	18e4      	addlt	r4, r4, r3
 8000fbc:	f000 f946 	bl	800124c <__malloc_lock>
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <_free_r+0x98>)
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	b933      	cbnz	r3, 8000fd6 <_free_r+0x2e>
 8000fc8:	6063      	str	r3, [r4, #4]
 8000fca:	6014      	str	r4, [r2, #0]
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fd2:	f000 b93c 	b.w	800124e <__malloc_unlock>
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	d90c      	bls.n	8000ff4 <_free_r+0x4c>
 8000fda:	6821      	ldr	r1, [r4, #0]
 8000fdc:	1862      	adds	r2, r4, r1
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	bf04      	itt	eq
 8000fe2:	681a      	ldreq	r2, [r3, #0]
 8000fe4:	685b      	ldreq	r3, [r3, #4]
 8000fe6:	6063      	str	r3, [r4, #4]
 8000fe8:	bf04      	itt	eq
 8000fea:	1852      	addeq	r2, r2, r1
 8000fec:	6022      	streq	r2, [r4, #0]
 8000fee:	6004      	str	r4, [r0, #0]
 8000ff0:	e7ec      	b.n	8000fcc <_free_r+0x24>
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	b10a      	cbz	r2, 8000ffc <_free_r+0x54>
 8000ff8:	42a2      	cmp	r2, r4
 8000ffa:	d9fa      	bls.n	8000ff2 <_free_r+0x4a>
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	1858      	adds	r0, r3, r1
 8001000:	42a0      	cmp	r0, r4
 8001002:	d10b      	bne.n	800101c <_free_r+0x74>
 8001004:	6820      	ldr	r0, [r4, #0]
 8001006:	4401      	add	r1, r0
 8001008:	1858      	adds	r0, r3, r1
 800100a:	4282      	cmp	r2, r0
 800100c:	6019      	str	r1, [r3, #0]
 800100e:	d1dd      	bne.n	8000fcc <_free_r+0x24>
 8001010:	6810      	ldr	r0, [r2, #0]
 8001012:	6852      	ldr	r2, [r2, #4]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	4401      	add	r1, r0
 8001018:	6019      	str	r1, [r3, #0]
 800101a:	e7d7      	b.n	8000fcc <_free_r+0x24>
 800101c:	d902      	bls.n	8001024 <_free_r+0x7c>
 800101e:	230c      	movs	r3, #12
 8001020:	602b      	str	r3, [r5, #0]
 8001022:	e7d3      	b.n	8000fcc <_free_r+0x24>
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	1821      	adds	r1, r4, r0
 8001028:	428a      	cmp	r2, r1
 800102a:	bf04      	itt	eq
 800102c:	6811      	ldreq	r1, [r2, #0]
 800102e:	6852      	ldreq	r2, [r2, #4]
 8001030:	6062      	str	r2, [r4, #4]
 8001032:	bf04      	itt	eq
 8001034:	1809      	addeq	r1, r1, r0
 8001036:	6021      	streq	r1, [r4, #0]
 8001038:	605c      	str	r4, [r3, #4]
 800103a:	e7c7      	b.n	8000fcc <_free_r+0x24>
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop
 8001040:	2000008c 	.word	0x2000008c

08001044 <_malloc_r>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	1ccd      	adds	r5, r1, #3
 8001048:	f025 0503 	bic.w	r5, r5, #3
 800104c:	3508      	adds	r5, #8
 800104e:	2d0c      	cmp	r5, #12
 8001050:	bf38      	it	cc
 8001052:	250c      	movcc	r5, #12
 8001054:	2d00      	cmp	r5, #0
 8001056:	4606      	mov	r6, r0
 8001058:	db01      	blt.n	800105e <_malloc_r+0x1a>
 800105a:	42a9      	cmp	r1, r5
 800105c:	d903      	bls.n	8001066 <_malloc_r+0x22>
 800105e:	230c      	movs	r3, #12
 8001060:	6033      	str	r3, [r6, #0]
 8001062:	2000      	movs	r0, #0
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	f000 f8f1 	bl	800124c <__malloc_lock>
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <_malloc_r+0xac>)
 800106c:	6814      	ldr	r4, [r2, #0]
 800106e:	4621      	mov	r1, r4
 8001070:	b991      	cbnz	r1, 8001098 <_malloc_r+0x54>
 8001072:	4c20      	ldr	r4, [pc, #128]	; (80010f4 <_malloc_r+0xb0>)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	b91b      	cbnz	r3, 8001080 <_malloc_r+0x3c>
 8001078:	4630      	mov	r0, r6
 800107a:	f000 f83d 	bl	80010f8 <_sbrk_r>
 800107e:	6020      	str	r0, [r4, #0]
 8001080:	4629      	mov	r1, r5
 8001082:	4630      	mov	r0, r6
 8001084:	f000 f838 	bl	80010f8 <_sbrk_r>
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	d124      	bne.n	80010d6 <_malloc_r+0x92>
 800108c:	230c      	movs	r3, #12
 800108e:	6033      	str	r3, [r6, #0]
 8001090:	4630      	mov	r0, r6
 8001092:	f000 f8dc 	bl	800124e <__malloc_unlock>
 8001096:	e7e4      	b.n	8001062 <_malloc_r+0x1e>
 8001098:	680b      	ldr	r3, [r1, #0]
 800109a:	1b5b      	subs	r3, r3, r5
 800109c:	d418      	bmi.n	80010d0 <_malloc_r+0x8c>
 800109e:	2b0b      	cmp	r3, #11
 80010a0:	d90f      	bls.n	80010c2 <_malloc_r+0x7e>
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	50cd      	str	r5, [r1, r3]
 80010a6:	18cc      	adds	r4, r1, r3
 80010a8:	4630      	mov	r0, r6
 80010aa:	f000 f8d0 	bl	800124e <__malloc_unlock>
 80010ae:	f104 000b 	add.w	r0, r4, #11
 80010b2:	1d23      	adds	r3, r4, #4
 80010b4:	f020 0007 	bic.w	r0, r0, #7
 80010b8:	1ac3      	subs	r3, r0, r3
 80010ba:	d0d3      	beq.n	8001064 <_malloc_r+0x20>
 80010bc:	425a      	negs	r2, r3
 80010be:	50e2      	str	r2, [r4, r3]
 80010c0:	e7d0      	b.n	8001064 <_malloc_r+0x20>
 80010c2:	428c      	cmp	r4, r1
 80010c4:	684b      	ldr	r3, [r1, #4]
 80010c6:	bf16      	itet	ne
 80010c8:	6063      	strne	r3, [r4, #4]
 80010ca:	6013      	streq	r3, [r2, #0]
 80010cc:	460c      	movne	r4, r1
 80010ce:	e7eb      	b.n	80010a8 <_malloc_r+0x64>
 80010d0:	460c      	mov	r4, r1
 80010d2:	6849      	ldr	r1, [r1, #4]
 80010d4:	e7cc      	b.n	8001070 <_malloc_r+0x2c>
 80010d6:	1cc4      	adds	r4, r0, #3
 80010d8:	f024 0403 	bic.w	r4, r4, #3
 80010dc:	42a0      	cmp	r0, r4
 80010de:	d005      	beq.n	80010ec <_malloc_r+0xa8>
 80010e0:	1a21      	subs	r1, r4, r0
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 f808 	bl	80010f8 <_sbrk_r>
 80010e8:	3001      	adds	r0, #1
 80010ea:	d0cf      	beq.n	800108c <_malloc_r+0x48>
 80010ec:	6025      	str	r5, [r4, #0]
 80010ee:	e7db      	b.n	80010a8 <_malloc_r+0x64>
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	20000090 	.word	0x20000090

080010f8 <_sbrk_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4c06      	ldr	r4, [pc, #24]	; (8001114 <_sbrk_r+0x1c>)
 80010fc:	2300      	movs	r3, #0
 80010fe:	4605      	mov	r5, r0
 8001100:	4608      	mov	r0, r1
 8001102:	6023      	str	r3, [r4, #0]
 8001104:	f7ff fbc6 	bl	8000894 <_sbrk>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_sbrk_r+0x1a>
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	b103      	cbz	r3, 8001112 <_sbrk_r+0x1a>
 8001110:	602b      	str	r3, [r5, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200000d4 	.word	0x200000d4

08001118 <__sread>:
 8001118:	b510      	push	{r4, lr}
 800111a:	460c      	mov	r4, r1
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	f000 f896 	bl	8001250 <_read_r>
 8001124:	2800      	cmp	r0, #0
 8001126:	bfab      	itete	ge
 8001128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800112a:	89a3      	ldrhlt	r3, [r4, #12]
 800112c:	181b      	addge	r3, r3, r0
 800112e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001132:	bfac      	ite	ge
 8001134:	6563      	strge	r3, [r4, #84]	; 0x54
 8001136:	81a3      	strhlt	r3, [r4, #12]
 8001138:	bd10      	pop	{r4, pc}

0800113a <__swrite>:
 800113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113e:	461f      	mov	r7, r3
 8001140:	898b      	ldrh	r3, [r1, #12]
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	4605      	mov	r5, r0
 8001146:	460c      	mov	r4, r1
 8001148:	4616      	mov	r6, r2
 800114a:	d505      	bpl.n	8001158 <__swrite+0x1e>
 800114c:	2302      	movs	r3, #2
 800114e:	2200      	movs	r2, #0
 8001150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001154:	f000 f868 	bl	8001228 <_lseek_r>
 8001158:	89a3      	ldrh	r3, [r4, #12]
 800115a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800115e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001162:	81a3      	strh	r3, [r4, #12]
 8001164:	4632      	mov	r2, r6
 8001166:	463b      	mov	r3, r7
 8001168:	4628      	mov	r0, r5
 800116a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800116e:	f000 b817 	b.w	80011a0 <_write_r>

08001172 <__sseek>:
 8001172:	b510      	push	{r4, lr}
 8001174:	460c      	mov	r4, r1
 8001176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117a:	f000 f855 	bl	8001228 <_lseek_r>
 800117e:	1c43      	adds	r3, r0, #1
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	bf15      	itete	ne
 8001184:	6560      	strne	r0, [r4, #84]	; 0x54
 8001186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800118a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800118e:	81a3      	strheq	r3, [r4, #12]
 8001190:	bf18      	it	ne
 8001192:	81a3      	strhne	r3, [r4, #12]
 8001194:	bd10      	pop	{r4, pc}

08001196 <__sclose>:
 8001196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800119a:	f000 b813 	b.w	80011c4 <_close_r>
	...

080011a0 <_write_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4c07      	ldr	r4, [pc, #28]	; (80011c0 <_write_r+0x20>)
 80011a4:	4605      	mov	r5, r0
 80011a6:	4608      	mov	r0, r1
 80011a8:	4611      	mov	r1, r2
 80011aa:	2200      	movs	r2, #0
 80011ac:	6022      	str	r2, [r4, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f7ff fb1f 	bl	80007f2 <_write>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_write_r+0x1e>
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	b103      	cbz	r3, 80011be <_write_r+0x1e>
 80011bc:	602b      	str	r3, [r5, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	200000d4 	.word	0x200000d4

080011c4 <_close_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4c06      	ldr	r4, [pc, #24]	; (80011e0 <_close_r+0x1c>)
 80011c8:	2300      	movs	r3, #0
 80011ca:	4605      	mov	r5, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	6023      	str	r3, [r4, #0]
 80011d0:	f7ff fb2b 	bl	800082a <_close>
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	d102      	bne.n	80011de <_close_r+0x1a>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	b103      	cbz	r3, 80011de <_close_r+0x1a>
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	200000d4 	.word	0x200000d4

080011e4 <_fstat_r>:
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	4c07      	ldr	r4, [pc, #28]	; (8001204 <_fstat_r+0x20>)
 80011e8:	2300      	movs	r3, #0
 80011ea:	4605      	mov	r5, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	f7ff fb26 	bl	8000842 <_fstat>
 80011f6:	1c43      	adds	r3, r0, #1
 80011f8:	d102      	bne.n	8001200 <_fstat_r+0x1c>
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	b103      	cbz	r3, 8001200 <_fstat_r+0x1c>
 80011fe:	602b      	str	r3, [r5, #0]
 8001200:	bd38      	pop	{r3, r4, r5, pc}
 8001202:	bf00      	nop
 8001204:	200000d4 	.word	0x200000d4

08001208 <_isatty_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4c06      	ldr	r4, [pc, #24]	; (8001224 <_isatty_r+0x1c>)
 800120c:	2300      	movs	r3, #0
 800120e:	4605      	mov	r5, r0
 8001210:	4608      	mov	r0, r1
 8001212:	6023      	str	r3, [r4, #0]
 8001214:	f7ff fb25 	bl	8000862 <_isatty>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_isatty_r+0x1a>
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	b103      	cbz	r3, 8001222 <_isatty_r+0x1a>
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	200000d4 	.word	0x200000d4

08001228 <_lseek_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4c07      	ldr	r4, [pc, #28]	; (8001248 <_lseek_r+0x20>)
 800122c:	4605      	mov	r5, r0
 800122e:	4608      	mov	r0, r1
 8001230:	4611      	mov	r1, r2
 8001232:	2200      	movs	r2, #0
 8001234:	6022      	str	r2, [r4, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	f7ff fb1e 	bl	8000878 <_lseek>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d102      	bne.n	8001246 <_lseek_r+0x1e>
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	b103      	cbz	r3, 8001246 <_lseek_r+0x1e>
 8001244:	602b      	str	r3, [r5, #0]
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	200000d4 	.word	0x200000d4

0800124c <__malloc_lock>:
 800124c:	4770      	bx	lr

0800124e <__malloc_unlock>:
 800124e:	4770      	bx	lr

08001250 <_read_r>:
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4c07      	ldr	r4, [pc, #28]	; (8001270 <_read_r+0x20>)
 8001254:	4605      	mov	r5, r0
 8001256:	4608      	mov	r0, r1
 8001258:	4611      	mov	r1, r2
 800125a:	2200      	movs	r2, #0
 800125c:	6022      	str	r2, [r4, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	f7ff faaa 	bl	80007b8 <_read>
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	d102      	bne.n	800126e <_read_r+0x1e>
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	b103      	cbz	r3, 800126e <_read_r+0x1e>
 800126c:	602b      	str	r3, [r5, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	200000d4 	.word	0x200000d4

08001274 <_init>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr

08001280 <_fini>:
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	bf00      	nop
 8001284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001286:	bc08      	pop	{r3}
 8001288:	469e      	mov	lr, r3
 800128a:	4770      	bx	lr
